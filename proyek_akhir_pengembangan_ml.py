# -*- coding: utf-8 -*-
"""Proyek_Akhir_Pengembangan_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mAcWsGFIl28_iesoyEnEeJwzZQ4Oys44
"""

import os
import tensorflow as tf
import shutil

# Membuat folder .kaggle di dalam folder root
!rm -rf ~/.kaggle && mkdir ~/.kaggle/

# Menyalin berkas kaggle.json pada direktori aktif saat ini ke folder .kaggle
!mv kaggle.json ~/.kaggle/kaggle.json
!chmod 600 ~/.kaggle/kaggle.json

# mendowload dataset menggunakan API command dari kaggle
!kaggle datasets download -d puneet6060/intel-image-classification

# mengekstrak file zip
import zipfile
zip_file = zipfile.ZipFile('/content/intel-image-classification.zip')
zip_file.extractall('/content/')

path = '/content/seg_train'

from sklearn.utils import validation
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
    rescale = 1./255,
    rotation_range = 20,
    shear_range = 0.2,
    zoom_range = 0.2,
    validation_split = 0.2,
    horizontal_flip = True,
    fill_mode = 'nearest'
)
test_datagen = ImageDataGenerator(
    rescale = 1./255,
    rotation_range = 20,
    shear_range = 0.2,
    zoom_range = 0.2,
    validation_split = 0.2,
    horizontal_flip = True,
    fill_mode = 'nearest'
)

train_generator = train_datagen.flow_from_directory(
    path,
    target_size=(100, 100),
    subset = 'training',
    class_mode = 'categorical'
)
validation_generator = test_datagen.flow_from_directory(
    path,
    target_size=(100, 100),
    subset = 'validation',
    class_mode = 'categorical'
)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(100, 100, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

class mycallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self,epoch,logs={}):
    if(logs.get('accuracy')>0.99 and logs.get('val_accuracy')>1.1):
      print("\n Proses pencarian terhenti. Akurasi sudah mencapai 90%!")
      self.model.stop_training = True

callback = mycallback()

model.compile(loss='categorical_crossentropy',
              optimizer = 'adam',
              metrics=['accuracy'])

num_epoch = 10
history = model.fit(train_generator,
                    steps_per_epoch = 6,
                    epochs = num_epoch,
                    validation_data = validation_generator,
                    verbose = 1,
                    callbacks=callback)

import matplotlib.pyplot as plt
import numpy as np

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy dan Validation Model')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='lower right')
plt.show

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss dan Validation_loss Model')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='upper right')
plt.show

convert = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model =convert.convert()

with tf.io.gfile.GFile('model.tflite','wb') as f:
  f.write(tflite_model)